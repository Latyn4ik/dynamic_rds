name: CI

on:
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SOURCE_AWS_REGION: "eu-central-1"
  SOURCE_OIDC_AWS_ROLE_TO_ASSUME: "arn:aws:iam::637594911457:role/github_oidc_role"
  SOURCE_RDS_ID: "dev-portal-postgres-main-0" # Name of RDS instance from which the snapshot will be taken

  TARGET_AWS_ACCOUNT_ID: "430151838095" # AWS account id with which the encrypted RDS snapshot will be shared and where the new RDS instance will be deployed
  TARGET_AWS_REGION: "us-east-2" # The region in which to place the encrypted RDS snapshot and where the new RDS instance will be deployed
  TARGET_OIDC_AWS_ROLE_TO_ASSUME: "mock"
  TARGET_RDS_ID: "test3R3R3" # The name for the new RDS instance that will be created based on the encrypted RDS snapshot

  NEW_RDS_SNAPSHOT_NAME_PREFIX: "transit-rds-snapshot"
  TRANSIT_KMS_KEY_ARN: "arn:aws:kms:eu-central-1:637594911457:alias/transit_rds_key"



permissions:
  id-token: write
  contents: read

jobs:
  create_rds_snapshots:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.SOURCE_OIDC_AWS_ROLE_TO_ASSUME }}
          aws-region:  ${{ env.SOURCE_AWS_REGION }}


      - name: Create RDS snapshot
        id: create_snapshot
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SNAPSHOT_ID="${{ env.NEW_RDS_SNAPSHOT_NAME_PREFIX }}-${TIMESTAMP}"
          aws rds create-db-snapshot \
            --db-snapshot-identifier ${SNAPSHOT_ID} \
            --db-instance-identifier ${{ env.SOURCE_RDS_ID }}

          echo "snapshot_id=${SNAPSHOT_ID}" >> $GITHUB_OUTPUT

      - name: Wait for snapshot to become available
        uses: ./.github/actions/wait-for-snapshot
        with:
          snapshot_id: ${{ steps.create_snapshot.outputs.snapshot_id }}


      - name: Copy and re-encrypt RDS snapshot with custom KMS key
        id: copy_snapshot
        run: |
          SOURCE_SNAPSHOT_ID=${{ steps.create_snapshot.outputs.snapshot_id }}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COPIED_SNAPSHOT_ID="re-encrypted-${SOURCE_SNAPSHOT_ID}-${TIMESTAMP}"
  
          echo "Copying and re-encrypting snapshot: ${SOURCE_SNAPSHOT_ID} to ${COPIED_SNAPSHOT_ID} with KMS key ${{ env.TRANSIT_KMS_KEY_ARN }}"
            
          aws rds copy-db-snapshot \
            --source-db-snapshot-identifier ${SOURCE_SNAPSHOT_ID} \
            --target-db-snapshot-identifier ${COPIED_SNAPSHOT_ID} \
            --kms-key-id ${{ env.TRANSIT_KMS_KEY_ARN }} \
            --output json
  
          echo "copied_snapshot_id=${COPIED_SNAPSHOT_ID}" >> $GITHUB_OUTPUT
          echo "Snapshot copy with new KMS key completed. Snapshot ID: ${COPIED_SNAPSHOT_ID}"

      - name: Wait for re-encrypted snapshot to become available
        uses: ./.github/actions/wait-for-snapshot
        with:
          snapshot_id: ${{ steps.copy_snapshot.outputs.copied_snapshot_id }}



  convert_shared_to_manual_rds_snapshot:
    needs: create_rds_snapshots
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.SOURCE_OIDC_AWS_ROLE_TO_ASSUME }}
          aws-region:  ${{ env.TARGET_AWS_REGION }}